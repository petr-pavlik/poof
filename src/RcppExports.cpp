// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// kge
double kge(std::vector<double> x, std::vector<double> y);
RcppExport SEXP _poof_kge(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(kge(x, y));
    return rcpp_result_gen;
END_RCPP
}
// hbv
NumericVector hbv(NumericVector x);
RcppExport SEXP _poof_hbv(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(hbv(x));
    return rcpp_result_gen;
END_RCPP
}
// api
NumericVector api(NumericVector P, double k, int t);
RcppExport SEXP _poof_api(SEXP PSEXP, SEXP kSEXP, SEXP tSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type P(PSEXP);
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type t(tSEXP);
    rcpp_result_gen = Rcpp::wrap(api(P, k, t));
    return rcpp_result_gen;
END_RCPP
}
// mm_d_m3_s
std::vector<double> mm_d_m3_s(std::vector<double> mm, std::vector<double> area);
RcppExport SEXP _poof_mm_d_m3_s(SEXP mmSEXP, SEXP areaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type mm(mmSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type area(areaSEXP);
    rcpp_result_gen = Rcpp::wrap(mm_d_m3_s(mm, area));
    return rcpp_result_gen;
END_RCPP
}
// mm_d_m3_d
std::vector<double> mm_d_m3_d(std::vector<double> mm, std::vector<double> area);
RcppExport SEXP _poof_mm_d_m3_d(SEXP mmSEXP, SEXP areaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type mm(mmSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type area(areaSEXP);
    rcpp_result_gen = Rcpp::wrap(mm_d_m3_d(mm, area));
    return rcpp_result_gen;
END_RCPP
}
// m3_s_mm_d
std::vector<double> m3_s_mm_d(std::vector<double> mm, std::vector<double> area);
RcppExport SEXP _poof_m3_s_mm_d(SEXP mmSEXP, SEXP areaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type mm(mmSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type area(areaSEXP);
    rcpp_result_gen = Rcpp::wrap(m3_s_mm_d(mm, area));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_poof_kge", (DL_FUNC) &_poof_kge, 2},
    {"_poof_hbv", (DL_FUNC) &_poof_hbv, 1},
    {"_poof_api", (DL_FUNC) &_poof_api, 3},
    {"_poof_mm_d_m3_s", (DL_FUNC) &_poof_mm_d_m3_s, 2},
    {"_poof_mm_d_m3_d", (DL_FUNC) &_poof_mm_d_m3_d, 2},
    {"_poof_m3_s_mm_d", (DL_FUNC) &_poof_m3_s_mm_d, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_poof(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
